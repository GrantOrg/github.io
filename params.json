{
  "name": "Vanity Page",
  "tagline": "Lucas Grant",
  "body": "### Welcome to Lucas Grant's Vanity page.\r\nThis page was created for the purpose of showing off who I am as a developer, and to show some of what I have learned in my class, Software Security taught by Andy Novocin.\r\n\r\n### Explanation of the class\r\nThe class was taught in c/c++ and focused on following the [CERT coding standard] (https://www.securecoding.cert.org/confluence/display/seccode/SEI+CERT+Coding+Standards)\r\n\r\n### Purpose\r\nThe purpose of this page specifically is to show the projects that i was involved in creating. The Projects that are going to be talked about are called:\r\n* [Markovian Tweet Generator] (https://github.com/motu454/SSProj1)\r\n* [Minesweeper] (https://github.com/motu454/SSproj3)\r\n* [GeeMail] (https://github.com/motu454/SSproj4)\r\n\r\n### Markovian Tweet Generator\r\nFor this project, we had to consume a text file (in this case we used the Iraq constitution and the US constitution) and produced a tweet based off of the input text. The rules that were highlighted for this project included the MEM and STR rules. This Project was a basic intro to C/C++ coding. It let us show our ability to do file IO, work with vectors and maps. Overall a simple yet efficient program.\r\n\r\n### Minesweeper\r\nThis project is exactly what it sounds like. It's a program for command line minesweeper. It involved building a board based off user input, creating the bombs, allowing guesses, and bringing up the flags in accordance with bomb locations. While most of the work was done with vectors, we also had to use srand for generating the bombs. This was important because it tied into how we broke the rand() function and learned that even srand isn't completely random unless the seed is based off of outside factors that are too hard to predict. \r\n\r\n### GeeMail - secure email\r\nThis was the most fun and most challenging project of the three. We were tasked with designing an asynchronous message platform that prompts a user for a sign-in or register as a new user. A user should have the ability to read any messages sent to themselves, and write a message to any other user. The catch was this all had to be a secure system. That meant that no passwords, messages or shared passphrases could be stored in plain text. We used a SQLite3 database for storage, and used Sha256 for encrypting passwords and passphrases. We stored those in the database as hashes to be compared to the input a user enters (and then have that input hashed and compared) and for the Messages we did our own XOR encryption on it with the shared passphrase. Although not the most secure way, it was our own method so we wanted to try it. Overall this was the project that I was most proud about creating, and the one I believe I learned the most useful skills from.\r\n\r\n\r\n### Wrap-up\r\nAlthough by no means did this class make me an expert in secure software, just knowing what to pay attention to during the creation of code will help me make safer software down the line.\r\n\r\n### GitHub link\r\nYou can find my entire GitHub page at the following link (@motu454)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}